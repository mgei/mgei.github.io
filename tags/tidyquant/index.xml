<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyquant on mgei.github.io</title>
    <link>https://mgei.github.io/tags/tidyquant/</link>
    <description>Recent content in tidyquant on mgei.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 06 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mgei.github.io/tags/tidyquant/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Europe&#39;s Largest Banks</title>
      <link>https://mgei.github.io/post/european-banks/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/european-banks/</guid>
      <description>Originally published on RPubs: http://rpubs.com/mgei/european-banks
 Loading the packages and getting the data We use tidyquant.
We are interested in the following largest banks in Europe: Gross, grösser, HSBC: Die 50 grössten Banken, die Europa zu bieten hat
 HSBC BNP Paribas Crédit Agricole Santander Deutsche Bank  Also we would like to have a look at UBS and Credit Suisse for comparison. The data is ready on Yahoo Finance.</description>
    </item>
    
    <item>
      <title>PCA use case</title>
      <link>https://mgei.github.io/post/pca-usecase/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/pca-usecase/</guid>
      <description>Originally published on RPubs: http://rpubs.com/mgei/pca-usecase
 library(tidyverse) library(tidyquant) library(quantmod) library(lubridate) library(broom) # for tidying up linear models library(factoextra) Data FTSE 350 Industrial Engineering index. The index components are Bodycote, Hill&amp;amp;Smith, IMI, Rotork, Spirax-Sarco Engineering, and Weir Group (components).
index &amp;lt;- read_csv(&amp;quot;postdata/pca-usecase/FTSE 350 Industrial Engineering Historical Data.csv&amp;quot;) index %&amp;lt;&amp;gt;% rename(date = Date) %&amp;gt;% mutate(date = mdy(date), adjusted = Price) %&amp;gt;% select(-Vol., -`Change %`) # gets data from Yahoo Finance bodycote &amp;lt;- tq_get(&amp;quot;BOY.</description>
    </item>
    
  </channel>
</rss>