<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on mgei.github.io</title>
    <link>https://mgei.github.io/tags/r/</link>
    <description>Recent content in R on mgei.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 08 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mgei.github.io/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I made this Github page</title>
      <link>https://mgei.github.io/post/github-page/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/github-page/</guid>
      <description>R / Blogdown / Hugo The website you are looking at is made with R and blogdown. Blogdown allows to use the static website generator Hugo with R Markdown documents (*.Rmd) instead of only pure markdown (*.md). So one can easily integrate R code which is rendered like a HTML R Markdown document.
The theme used here is Minimo.
Screenshot of the Minimo theme with default colors
  Github pages This website hosted on Github.</description>
    </item>
    
    <item>
      <title>Europe&#39;s Largest Banks</title>
      <link>https://mgei.github.io/post/european-banks/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/european-banks/</guid>
      <description>Originally published on RPubs: http://rpubs.com/mgei/european-banks
 Loading the packages and getting the data We use tidyquant.
We are interested in the following largest banks in Europe: Gross, grösser, HSBC: Die 50 grössten Banken, die Europa zu bieten hat
 HSBC BNP Paribas Crédit Agricole Santander Deutsche Bank  Also we would like to have a look at UBS and Credit Suisse for comparison. The data is ready on Yahoo Finance.</description>
    </item>
    
    <item>
      <title>PCA use case</title>
      <link>https://mgei.github.io/post/pca-usecase/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/pca-usecase/</guid>
      <description>Originally published on RPubs: http://rpubs.com/mgei/pca-usecase
 library(tidyverse) library(tidyquant) library(quantmod) library(lubridate) library(broom) # for tidying up linear models library(factoextra) Data FTSE 350 Industrial Engineering index. The index components are Bodycote, Hill&amp;amp;Smith, IMI, Rotork, Spirax-Sarco Engineering, and Weir Group (components).
index &amp;lt;- read_csv(&amp;quot;postdata/pca-usecase/FTSE 350 Industrial Engineering Historical Data.csv&amp;quot;) index %&amp;lt;&amp;gt;% rename(date = Date) %&amp;gt;% mutate(date = mdy(date), adjusted = Price) %&amp;gt;% select(-Vol., -`Change %`) # gets data from Yahoo Finance bodycote &amp;lt;- tq_get(&amp;quot;BOY.</description>
    </item>
    
    <item>
      <title>Analyzing the Swiss cantons with more lawyers than medical doctors</title>
      <link>https://mgei.github.io/post/lawyer-physicians/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/lawyer-physicians/</guid>
      <description>Originally published on RPubs: http://rpubs.com/mgei/lawyers
 Intro In 2017 Switzerland had 18’858 free physician working in individual doctor’s offices (Aerzte mit Praxistätigkeit as opposed to doctors employed by hospitals). Also Switzerland currently has 12’967 registered lawyers.1 Relative to the number of inhabitants of nearly 8.5 million (2017), that’s on average 2.2 physicians and 1.5 lawyers per 1’000 inhabitants.
As we will see, in four cantons lawyers outnumber physicians.</description>
    </item>
    
    <item>
      <title>How far to the closest hospital?</title>
      <link>https://mgei.github.io/post/drivingtimes/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/drivingtimes/</guid>
      <description>Originally published on RPubs: http://rpubs.com/mgei/drivingtimes
 Intro Imagine you just fell out of a plane over Switzerland and landed at a random location. As you are wounded your number one concern it to get to a hospital asap. Not any hospital but one that has an emergency room and is equipped at least with a CT to check for fractures.</description>
    </item>
    
    <item>
      <title>R function for accessing the tel.search.ch API</title>
      <link>https://mgei.github.io/post/tel-search-api/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/tel-search-api/</guid>
      <description>Originally published on Github: https://github.com/mgei/telsearchR
 tel.search.ch API This function allows to fetch enteries from the Swiss telephone directory tel.search.ch. It returns a tibble (dplyr).
Here’s the official API documentation. The R function allows for all of the fields. Additionally, when adj_formats is set to TRUE (default), then the column formats are set appropriately (character, date/time, integer).
library(tidyverse) library(lubridate) library(httr) library(xml2) library(purrr) telsearch &amp;lt;- function(was, wo, q, privat = 1, firma = 1, pos, maxnum = 200, key, lang, count_only = 0, adj_formats = T) { if (missing(was)) { stop(&amp;quot;was keyword is mandatory&amp;quot;) } if (missing(key) &amp;amp; maxnum &amp;gt; 10) { warning(&amp;quot;without a key the maxnum is 10&amp;quot;) maxnum &amp;lt;- 10 } url &amp;lt;- paste0(&amp;quot;https://tel.</description>
    </item>
    
    <item>
      <title>Swiss Hospitals Classification</title>
      <link>https://mgei.github.io/post/swiss-hospitals-classification/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/swiss-hospitals-classification/</guid>
      <description>Originally published on Github: https://github.com/mgei/swiss-hospitals-classification
 R Shiny app for cluster analysis A simple R Shiny app to classify Swiss hospitals according to their DRG positions using clustering and wordclouds.
The app is also live for trying here: http://swiss-hospitals-classification.econovo.io/
 Data We use data from the Swiss Federal Office of Public Health (BAG), i.e. data from the DRG Fallzahlensuche. We have the following script to scrape data from http://www.</description>
    </item>
    
    <item>
      <title>Create open/closing hours data for timevis</title>
      <link>https://mgei.github.io/post/timevis-range/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/timevis-range/</guid>
      <description>Originally published on a Github gist: https://gist.github.com/mgei/5708f7e605d5d23a45777a1d156b0ee8
 Timevis Timevis is a package by Dean Attali to create fully interactive timeline visualizations in R. It is available on Github with a demo and how-to here: https://daattali.com/shiny/timevis-demo/
 Range data library(tidyverse) library(lubridate) library(timevis) days &amp;lt;- tibble(date = seq(date(&amp;quot;2018-01-01&amp;quot;), by = &amp;quot;days&amp;quot;, length.out = 2)) %&amp;gt;% mutate(day = weekdays(date)) hours &amp;lt;- tibble(daytype = c(&amp;quot;weekday&amp;quot;, &amp;quot;weekday&amp;quot;, &amp;quot;weekday&amp;quot;, &amp;quot;weekday&amp;quot;, &amp;quot;weekday&amp;quot;, &amp;quot;weekend&amp;quot;), time_from = c(&amp;quot;00:00&amp;quot;, &amp;quot;08:00&amp;quot;, &amp;quot;12:00&amp;quot;, &amp;quot;13:00&amp;quot;, &amp;quot;17:00&amp;quot;, &amp;quot;00:00&amp;quot; ), time_to = c(&amp;quot;08:00&amp;quot;, &amp;quot;12:00&amp;quot;, &amp;quot;13:00&amp;quot;, &amp;quot;17:00&amp;quot;, &amp;quot;23:59&amp;quot;, &amp;quot;23:59&amp;quot; ), state = c(&amp;quot;closed&amp;quot;, &amp;quot;open&amp;quot;, &amp;quot;closed&amp;quot;, &amp;quot;open&amp;quot;, &amp;quot;closed&amp;quot;, &amp;quot;closed&amp;quot;)) week &amp;lt;- tibble(#day = c(&amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;, &amp;quot;Saturday&amp;quot;, &amp;quot;Sunday&amp;quot;), day = c(&amp;quot;Montag&amp;quot;, &amp;quot;Dienstag&amp;quot;, &amp;quot;Mittwoch&amp;quot;, &amp;quot;Donnerstag&amp;quot;, &amp;quot;Freitag&amp;quot;, &amp;quot;Samstag&amp;quot;, &amp;quot;Sonntag&amp;quot;), daytype = c(rep(&amp;quot;weekday&amp;quot;, 5), rep(&amp;quot;weekend&amp;quot;, 2))) days %&amp;gt;% left_join(left_join(week, hours, by = &amp;quot;daytype&amp;quot;), by = &amp;quot;day&amp;quot;) %&amp;gt;% mutate(start = ymd_hm(paste(date, time_from)), end = ymd_hm(paste(date, time_to))) %&amp;gt;% select(start, end, state) -&amp;gt; openclosed openclosed ## # A tibble: 10 x 3 ## start end state ## &amp;lt;dttm&amp;gt; &amp;lt;dttm&amp;gt; &amp;lt;chr&amp;gt; ## 1 2018-01-01 00:00:00 2018-01-01 08:00:00 closed ## 2 2018-01-01 08:00:00 2018-01-01 12:00:00 open ## 3 2018-01-01 12:00:00 2018-01-01 13:00:00 closed ## 4 2018-01-01 13:00:00 2018-01-01 17:00:00 open ## 5 2018-01-01 17:00:00 2018-01-01 23:59:00 closed ## 6 2018-01-02 00:00:00 2018-01-02 08:00:00 closed ## 7 2018-01-02 08:00:00 2018-01-02 12:00:00 open ## 8 2018-01-02 12:00:00 2018-01-02 13:00:00 closed ## 9 2018-01-02 13:00:00 2018-01-02 17:00:00 open ## 10 2018-01-02 17:00:00 2018-01-02 23:59:00 closed timevis(data = openclosed %&amp;gt;% mutate(content = state, style = if_else(state == &amp;quot;open&amp;quot;, &amp;quot;background: green&amp;quot;, &amp;quot;background: red&amp;quot;))) + -   {&#34;</description>
    </item>
    
    <item>
      <title>Create a T-account plot for a balance sheet or income statement using ggplot2 in R</title>
      <link>https://mgei.github.io/post/t-account-ggplot2/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/t-account-ggplot2/</guid>
      <description>Originally published on a Github gist: https://gist.github.com/mgei/14e44b7121fcee18f3809cf4bfd1af71
 Loading the packages and getting the data library(tidyverse) library(scales) Because the native quantmod::getFinancials() and tidyquant::tq_get(get = financials) do not work anymore (discontinued due to a change in Yahoo Finance), we use an alternative posted on Stackoverflow. Here’s the function:
scrapy_stocks &amp;lt;- function(stock){ if (&amp;quot;rvest&amp;quot; %in% installed.packages()) { library(rvest) }else{ install.packages(&amp;quot;rvest&amp;quot;) library(rvest) } for (i in 1:length(stock)) { tryCatch( { url &amp;lt;- &amp;quot;https://finance.</description>
    </item>
    
    <item>
      <title>Generate mock addresses with realistic names and locations</title>
      <link>https://mgei.github.io/post/mock-addresses/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/mock-addresses/</guid>
      <description>Originally published on a Github gist: https://gist.github.com/mgei/0269fb9e4120be24af6b5d1d344b89b6
 Fake name generator Fake Name Generator allows to generate mock names/addresses. One can choose from plenty of fields to include besides names and addresses, such as date of birth, phone number, ID number, and also lon/lat coordinates.
For the following purpose we will order as many addresses as possible and should not forget to include longitude and latitude.</description>
    </item>
    
    <item>
      <title>Geocode in R with ggmap (and a free Google API key)</title>
      <link>https://mgei.github.io/post/geocode-ggmap/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/geocode-ggmap/</guid>
      <description>Youtube video https://www.youtube.com/watch?v=A7LzEJiKQvc
   How to geocode locations or addresses in R with library(ggmap) in 2018/2019. Previously you could just use geocode(“New York”) to get the coordinates, but Google now required a Google Cloud Platform API key. Get the latest ggmap version from Github, and a free 12 month trial to GCP. This is how you geocode now.
We will create a leaflet map with library(leaflet) in R.</description>
    </item>
    
    <item>
      <title>Principal Component Analysis in R for Portfolio Diversification</title>
      <link>https://mgei.github.io/post/pca-tutorial/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mgei.github.io/post/pca-tutorial/</guid>
      <description>Youtube video https://www.youtube.com/watch?v=yrH5A0ZPxf0
   I perform a PCA on a set of six MSCI indices. First, I go download the data and import it into R with readxl. Then I look at the data and the returns with some very basic techniques like plotting the performance with ggplot and tidyquant. Later I perform a PCA and also apply a varimax transformation on the loadings (the eigenvectors). Lastly, I look at how an equal-weighted portfolio performed versus a portfolio with components selected based on the PCA/varimax results.</description>
    </item>
    
  </channel>
</rss>